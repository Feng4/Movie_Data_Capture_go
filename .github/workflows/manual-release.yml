name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: v1.0.1)'
        required: true
        default: 'v1.0.0'
        type: string
      create_tag:
        description: '是否创建Git标签'
        required: true
        default: true
        type: boolean

jobs:
  build:
    name: Build for ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - os: windows
            arch: amd64
            runner: windows-latest
            ext: .exe
            
          - os: windows
            arch: 386
            runner: windows-latest
            ext: .exe
            
          # Linux builds
          - os: linux
            arch: amd64
            runner: ubuntu-latest
            ext: ''
            
          - os: linux
            arch: 386
            runner: ubuntu-latest
            ext: ''
            
          - os: linux
            arch: arm64
            runner: ubuntu-latest
            ext: ''
            
          - os: linux
            arch: arm
            runner: ubuntu-latest
            ext: ''
            
          # macOS builds
          - os: darwin
            arch: amd64
            runner: macos-latest
            ext: ''
            
          - os: darwin
            arch: arm64
            runner: macos-latest
            ext: ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        go build -ldflags="-s -w -X main.Version=${{ inputs.version }}" -o mdc-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} main.go

    - name: Prepare release package
      run: |
        # Create unique directory name to avoid conflicts
        BUILD_DIR="release-${{ matrix.os }}-${{ matrix.arch }}-${{ github.run_id }}"
        mkdir -p "$BUILD_DIR"
        
        # Copy binary
        cp mdc-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} "$BUILD_DIR/"
        
        # Copy additional files if they exist
        [ -f config.yaml ] && cp config.yaml "$BUILD_DIR/" || echo "config.yaml not found"
        [ -f README.md ] && cp README.md "$BUILD_DIR/" || echo "README.md not found"
        [ -d Img ] && cp -r Img "$BUILD_DIR/" || echo "Img directory not found"
        
        # Create archive
        if [ "${{ matrix.os }}" = "windows" ]; then
          # Use PowerShell for Windows
          powershell -Command "Compress-Archive -Path '$BUILD_DIR/*' -DestinationPath 'mdc-${{ matrix.os }}-${{ matrix.arch }}.zip' -Force"
        else
          # Use tar for Unix systems
          tar -czf mdc-${{ matrix.os }}-${{ matrix.arch }}.tar.gz -C "$BUILD_DIR" .
        fi
        
        # Clean up temporary directory
        rm -rf "$BUILD_DIR"
      shell: bash

    - name: Upload artifact (Windows)
      if: matrix.os == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: mdc-${{ matrix.os }}-${{ matrix.arch }}
        path: mdc-${{ matrix.os }}-${{ matrix.arch }}.zip
        retention-days: 30

    - name: Upload artifact (Unix)
      if: matrix.os != 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: mdc-${{ matrix.os }}-${{ matrix.arch }}
        path: mdc-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
        retention-days: 30

  create-tag:
    name: Create Git Tag
    runs-on: ubuntu-latest
    if: inputs.create_tag
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create and push tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag ${{ inputs.version }}
        git push origin ${{ inputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Create Release
    needs: [build, create-tag]
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Display structure of downloaded files
      run: |
        echo "=== Downloaded artifacts ==="
        find ./artifacts -type f -name "*.zip" -o -name "*.tar.gz" | sort

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ inputs.version }}
        release_name: Movie Data Capture Go ${{ inputs.version }}
        body: |
          ## 🚀 Movie Data Capture Go ${{ inputs.version }}
          
          ### 📦 下载说明
          
          请根据你的操作系统下载对应的版本：
          
          - **Windows**:
            - `mdc-windows-amd64.zip` - Windows 64位 (推荐)
            - `mdc-windows-386.zip` - Windows 32位
            
          - **Linux**:
            - `mdc-linux-amd64.tar.gz` - Linux 64位 (推荐)
            - `mdc-linux-386.tar.gz` - Linux 32位
            - `mdc-linux-arm64.tar.gz` - Linux ARM64
            - `mdc-linux-arm.tar.gz` - Linux ARM
            
          - **macOS**:
            - `mdc-darwin-amd64.tar.gz` - macOS Intel 芯片
            - `mdc-darwin-arm64.tar.gz` - macOS Apple Silicon (M1/M2)
          
          ### 🔧 使用方法
          
          1. 下载对应平台的压缩包
          2. 解压到任意目录
          3. 编辑 `config.yaml` 配置文件
          4. 运行程序
          
          ### 📝 更新内容
          
          手动发布版本，包含所有最新功能和修复。
          
          完整的更新日志请查看 [README.md](https://github.com/Feng4/movie-data-capture-go/blob/main/README.md)
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        echo "=== Uploading release assets ==="
        for artifact_dir in ./artifacts/*/; do
          echo "Processing directory: $artifact_dir"
          for file in "$artifact_dir"*.{zip,tar.gz}; do
            if [ -f "$file" ]; then
              echo "Uploading: $file"
              gh release upload ${{ inputs.version }} "$file" --clobber
            fi
          done
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}